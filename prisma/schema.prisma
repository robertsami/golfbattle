// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  friendId      String    @unique @default(cuid())
  accounts      Account[]
  sessions      Session[]

  // Friend relationships
  friendsRequested    Friend[]  @relation("UserFriends")
  friendRequestsReceived Friend[] @relation("FriendUser")

  // Matches
  matchesAsPlayer1    Match[]   @relation("Player1")
  matchesAsPlayer2    Match[]   @relation("Player2")
  matchResultsSubmitted MatchResult[] @relation("ResultSubmitter")

  // Competitions
  competitionsCreated Competition[] @relation("CompetitionCreator")
  competitionParticipants CompetitionParticipant[]

  // Birdie entries
  birdieEntries       BirdieEntry[]
  birdieAttestations  BirdieEntry[] @relation("BirdieAttester")

  // Bingo entries
  bingoEntries        BingoEntry[]
  bingoAttestations   BingoEntry[]  @relation("BingoAttester")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendUser", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Match {
  id          String   @id @default(cuid())
  player1Id   String
  player2Id   String
  player1     User     @relation("Player1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2     User     @relation("Player2", fields: [player2Id], references: [id], onDelete: Cascade)
  name        String?
  status      MatchStatus @default(ACTIVE)
  results     MatchResult[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MatchStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model MatchResult {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player1Score Int
  player2Score Int
  date        DateTime
  status      ResultStatus @default(PENDING)
  submitterId String
  submitter   User     @relation("ResultSubmitter", fields: [submitterId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ResultStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Competition {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        CompetitionType
  creatorId   String
  creator     User     @relation("CompetitionCreator", fields: [creatorId], references: [id])
  boardSize   Int?     // For bingo competitions (3, 4, or 5 for grid size)
  participants CompetitionParticipant[]
  birdieEntries BirdieEntry[]
  bingoSquares BingoSquare[]
  bingoEntries BingoEntry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CompetitionType {
  BIRDIE_CHECKLIST
  BINGO
}

model CompetitionParticipant {
  id            String   @id @default(cuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@unique([competitionId, userId])
}

model BirdieEntry {
  id            String   @id @default(cuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holeNumber    Int
  date          DateTime
  attestedById  String?
  attestedBy    User?    @relation("BirdieAttester", fields: [attestedById], references: [id])
  createdAt     DateTime @default(now())

  @@unique([competitionId, userId, holeNumber])
}

model BingoSquare {
  id            String   @id @default(cuid())
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  row           Int
  column        Int
  description   String
  entries       BingoEntry[]
  createdAt     DateTime @default(now())

  @@unique([competitionId, row, column])
}

model BingoEntry {
  id            String   @id @default(cuid())
  squareId      String
  square        BingoSquare @relation(fields: [squareId], references: [id], onDelete: Cascade)
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          DateTime
  attestedById  String?
  attestedBy    User?    @relation("BingoAttester", fields: [attestedById], references: [id])
  createdAt     DateTime @default(now())

  @@unique([squareId, userId])
}
